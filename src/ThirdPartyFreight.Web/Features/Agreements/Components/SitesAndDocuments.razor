@inject HttpClient Http


    <TelerikLoaderContainer OverlayThemeColor="light"
                            Visible="@(!IsInitialDataLoadComplete)"
                            Text="@null"
                            Class="initial-data-loader">
        <Template>
            <TelerikLoader Size="@ThemeConstants.Loader.Size.Large" Type="@LoaderType.InfiniteSpinner" />
        </Template>
    </TelerikLoaderContainer>
    <TelerikGrid Data="@GridData"
                 Height="@Height"
                 FilterMode="GridFilterMode.FilterMenu"
                 FilterMenuType="FilterMenuType.CheckBoxList"
                 Pageable="true"
                 PageSize="@PageSize"
                 Sortable="true"
                 SortMode="SortMode.Single"
                 ShowColumnMenu="true"
                 Resizable="true"
                 SelectionMode="@SelectionMode"
                 SelectedItems="@SelectedSites"
                 SelectedItemsChanged="@((IEnumerable<CustomerSite> siteList) => OnSelect(siteList))"
                 >
        <GridSettings>
            <GridPagerSettings InputType="@InputType" PageSizes="@PageSizes" ButtonCount="@ButtonCount" Position="@PagerPosition" />
        </GridSettings>
        <GridColumns>
            <GridCheckboxColumn SelectAll="@ShowSelectAll" Width="2px" ShowColumnMenu="false"></GridCheckboxColumn>
            <GridColumn Field="Site" Title="Site #" VisibleInColumnChooser="true" Visible="true" Width="8px"/>
            <GridColumn Field="FullAddress" Title="Site Address" VisibleInColumnChooser="true" Width="35px"/>
        </GridColumns>
    </TelerikGrid>

@code {

    [Parameter] public AgreementResponse? DataModel { get; set; }
    [Parameter] public EventCallback<AgreementResponse> DataModelChanged { get; set; }
    GridSelectionMode SelectionMode { get; set; } = GridSelectionMode.Multiple;
    bool ShowSelectAll => SelectionMode == GridSelectionMode.Multiple;
    public IEnumerable<CustomerSite> SelectedSites { get; set; } = new List<CustomerSite>();
    private int ActiveTabIndex { get; set; } = 0;
    bool IsInitialDataLoadComplete { get; set; }
    public ObservableCollection<CustomerSite>? GridData { get; set; }
    public List<CustomerSite>? AllData { get; set; }
    private const int PageSize = 20;
    private const string Height = "100%";
    private const int ButtonCount = 5;
    PagerInputType InputType { get; set; } = PagerInputType.Buttons;
    PagerPosition PagerPosition { get; set; } = PagerPosition.Bottom;
    static List<int?> PageSizes => [20, 30, 40, 50, null];

    protected override async Task OnInitializedAsync()
    {
        if (IsInitialDataLoadComplete == false)
        {
            var response = await Http.GetFromJsonAsync<CustomerSiteResponse>($"api/v1/customers/{DataModel?.CustomerNumber.ToString()}");
            AllData = response?.Sites;
        }

        if (AllData is not null)
        {
            GridData = new ObservableCollection<CustomerSite>(AllData);
            IsInitialDataLoadComplete = true;
        }
    }

    void OnSelect(IEnumerable<CustomerSite> siteList)
    {
        List<SiteResponse> selectedSites = [];
        selectedSites.AddRange(siteList.Select(site => new SiteResponse { SiteNumber = int.Parse(site.Site), Street = site.SiteAddress, City = site.City, State = site.State, ZipCode = site.ZipCode }));

        if (DataModel != null) DataModel.Sites = selectedSites;
    }



}