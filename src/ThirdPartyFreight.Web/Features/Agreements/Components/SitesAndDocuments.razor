@using ThirdPartyFreight.Domain.Documents
@inject HttpClient Http

@if (GridList.Count >= 1)
{
    <TelerikTabStrip @bind-ActiveTabIndex="@ActiveTabIndex">
        @foreach (var grid in GridList)
        {
            <TabStripTab Title="@grid.GridName">

                @switch (grid)
                {
                    case ModalGrid<SiteResponse> siteGrid:
                        <TelerikGrid Data="@siteGrid.GridData"
                                     Height="@Height"
                                     Width="100%"
                                     Class="grid-no-scroll"
                                     Pageable="true"
                                     PageSize="5"
                                     Sortable="true"
                                     SortMode="SortMode.Single"
                                     Resizable="true">
                            <GridColumns>
                                @foreach (var col in siteGrid.Columns)
                                {
                                    <GridColumn Field="@col.Field" Title="@col.Title"/>
                                }
                            </GridColumns>
                        </TelerikGrid>
                        break;
                    case ModalGrid<DocumentResponse> docGrid:
                        <TelerikGrid Data="@docGrid.GridData"
                                     Height="@Height"
                                     Width="100%"
                                     Class="grid-no-scroll"
                                     Pageable="true"
                                     PageSize="5"
                                     Sortable="true"
                                     SortMode="SortMode.Single"
                                     Resizable="true">
                            <GridColumns>
                                @foreach (var col in docGrid.Columns)
                                {
                                    <GridColumn Field="@col.Field" Title="@col.Title"/>
                                }
                                <GridCommandColumn Width="100px">
                                    <GridCommandButton Icon="@SvgIcon.Download"></GridCommandButton>
                                    @if (((DocumentResponse)context).IsPdf)
                                    {
                                        <GridCommandButton Icon="@SvgIcon.FilePdf" />
                                    }
                                </GridCommandColumn>
                            </GridColumns>
                        </TelerikGrid>
                        break;
                }

            </TabStripTab>
        }
    </TelerikTabStrip>
}
else
{
    <TelerikLoaderContainer OverlayThemeColor="light"
                            Visible="@(!IsInitialDataLoadComplete)"
                            Text="@null"
                            Class="initial-data-loader">
        <Template>
            <TelerikLoader Size="@ThemeConstants.Loader.Size.Large" Type="@LoaderType.InfiniteSpinner"/>
        </Template>
    </TelerikLoaderContainer>
    <TelerikGrid Data="@GridData"
                 Height="@Height"
                 FilterMode="GridFilterMode.FilterMenu"
                 FilterMenuType="FilterMenuType.CheckBoxList"
                 Pageable="true"
                 PageSize="@PageSize"
                 Sortable="true"
                 SortMode="SortMode.Single"
                 ShowColumnMenu="true"
                 Resizable="true"
                 SelectionMode="@SelectionMode"
                 SelectedItems="@SelectedSites"
                 SelectedItemsChanged="@((IEnumerable<CustomerSite> siteList) => OnSelect(siteList))">
        <GridToolBarTemplate>
            <span>Search for any sites or address by typing in the box to the right.</span>
            <span class="k-toolbar-spacer"></span>
            <GridSearchBox Placeholder="@Placeholder"
                           Width="@(SearchBoxWidth >= 100 ? SearchBoxWidth + "px" : "100px")"
                           DebounceDelay="@DebounceDelay">
            </GridSearchBox>
        </GridToolBarTemplate>
        <GridSettings>
            <GridPagerSettings InputType="@InputType" PageSizes="@PageSizes" ButtonCount="@ButtonCount" Position="@PagerPosition"/>
        </GridSettings>
        <GridColumns>
            <GridCheckboxColumn CheckBoxOnlySelection="true" SelectAll="@ShowSelectAll" Width="2px" ShowColumnMenu="false"></GridCheckboxColumn>
            <GridColumn Field="Site" Title="Site #" VisibleInColumnChooser="true" Visible="true" Width="8px"/>
            <GridColumn Field="FullAddress" Title="Site Address" VisibleInColumnChooser="true" Width="35px"/>
        </GridColumns>
    </TelerikGrid>
}


@code {

    [Parameter] public AgreementResponse? DataModel { get; set; }
    [Parameter] public EventCallback<AgreementResponse> DataModelChanged { get; set; }
    [Parameter] public List<IModalGrid> GridList { get; set; } = [];
    [Parameter] public bool LoadData { get; set; } = true;
    GridSelectionMode SelectionMode { get; set; } = GridSelectionMode.Multiple;
    bool ShowSelectAll => SelectionMode == GridSelectionMode.Multiple;
    public IEnumerable<CustomerSite> SelectedSites { get; set; } = new List<CustomerSite>();
    private int ActiveTabIndex { get; set; } = 0;
    bool IsInitialDataLoadComplete { get; set; }
    public ObservableCollection<CustomerSite>? GridData { get; set; }
    public List<CustomerSite>? AllData { get; set; }
    private const int PageSize = 20;
    private const string Height = "100%";
    private const int ButtonCount = 5;
    PagerInputType InputType { get; set; } = PagerInputType.Buttons;
    PagerPosition PagerPosition { get; set; } = PagerPosition.Bottom;
    static List<int?> PageSizes => [20, 30, 40, 50, null];
    int? SearchBoxWidth { get; set; } = 200;
    int DebounceDelay { get; set; } = 200;
    string Placeholder { get; set; } = "Search...";
    List<SiteResponse> _selectedSites = [];

    protected override async Task OnInitializedAsync()
    {
        if (IsInitialDataLoadComplete == false && LoadData)
        {
            var response = await Http.GetFromJsonAsync<CustomerSiteResponse>($"{GetCustomersEndPoint}/{DataModel?.CustomerNumber.ToString()}");
            AllData = response?.Sites;
            if (AllData is not null)
            {
                GridData = new ObservableCollection<CustomerSite>(AllData);
            }

            IsInitialDataLoadComplete = true;
        }
    }

    void OnSelect(IEnumerable<CustomerSite> site)
    {
        _selectedSites.AddRange(site.Select(customerSite => new SiteResponse { SiteNumber = int.Parse(customerSite.Site), Street = customerSite.SiteAddress, City = customerSite.City, State = customerSite.State, ZipCode = customerSite.ZipCode }));

        if (DataModel != null) DataModel.Sites = _selectedSites;
    }


}