
<TelerikWindow Class="demo-window" Width="1260px" Height="968px" Centered="true" Visible="@WindowIsVisible" VisibleChanged="@WindowIsVisibleChanged" Modal="true" FooterLayoutAlign="WindowFooterLayoutAlign.Center">
    <WindowTitle>
        <strong>Agreement Request @Data!.Id</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close"/>
    </WindowActions>
    <WindowContent>
        <TelerikGridLayout RowSpacing="6px" ColumnSpacing="10px">
            <GridLayoutRows>
                <GridLayoutRow Height="20px"></GridLayoutRow>
                <GridLayoutRow Height="100px"></GridLayoutRow>
                <GridLayoutRow Height="20px"></GridLayoutRow>
                <GridLayoutRow Height="100dpx"></GridLayoutRow>
            </GridLayoutRows>
            <GridLayoutColumns>
                <GridLayoutColumn Width="270px"></GridLayoutColumn>
                <GridLayoutColumn Width="270px"></GridLayoutColumn>
                <GridLayoutColumn Width="300px"></GridLayoutColumn>
            </GridLayoutColumns>
            <GridLayoutItems>
                <GridLayoutItem Row="1" Column="1">
                    <div class="grid-layout-heading k-text-uppercase k-font-weight-bold k-text-inverse">Customer Information</div>
                </GridLayoutItem>
                <GridLayoutItem Row="1" Column="3">
                    <div class="grid-layout-heading k-text-uppercase k-font-weight-bold k-text-inverse">Status Information</div>
                </GridLayoutItem>
                <GridLayoutItem Row="2" Column="1" ColumnSpan="2">
                    <CustomerInfo CompanyName="@_businessName" CustomerNumber="@_customerNumber" CustomerEmail="@_contactEmail" CustomerName="@_contactName"/>
                </GridLayoutItem>
                <GridLayoutItem Row="2" Column="3" ColumnSpan="2">
                    <StatusInfo Status="@_status" EnvelopeStatus="@_envelopeStatus" MdmTicketNumber="@_mdmTicketNumber" AgreementType="@_agreementType"/>
                </GridLayoutItem>
                <GridLayoutItem Row="3" Column="1">
                    <div class="grid-layout-heading k-text-uppercase k-font-weight-bold k-text-inverse">Carrier Information</div>
                </GridLayoutItem>
                <GridLayoutItem Row="4" Column="1" ColumnSpan="2">
                    <CarrierInfo StripTabList="@CourierStripTabList" TxtInputList="@CourierTxtInputList"/>
                </GridLayoutItem>
                <GridLayoutItem Row="3" Column="3">
                    <div class="grid-layout-heading k-text-uppercase k-font-weight-bold k-text-inverse">Sites & Documents</div>
                </GridLayoutItem>
                <GridLayoutItem Row="4" Column="3" ColumnSpan="2">
                    <SitesAndDocuments GridList="@GridDataList" LoadData="false"/>
                </GridLayoutItem>
            </GridLayoutItems>
        </TelerikGridLayout>
    </WindowContent>
    <WindowFooter>
        <TelerikButton Icon="@SvgIcon.X" OnClick="@(() => WindowIsVisibleChanged.InvokeAsync(false))">Close</TelerikButton>
    </WindowFooter>
</TelerikWindow>


@code {
    [Parameter] public bool WindowIsVisible { get; set; }

    [Parameter] public EventCallback<bool> WindowIsVisibleChanged { get; set; }

    [Parameter] public required AgreementResponse? Data { get; set; }

    private List<StripTab> CourierStripTabList { get; set; } =
    [
        new StripTab { Title = "Primary Courier" },
        new StripTab { Title = "LTL Courier" }
    ];

    private List<TxtInput> CourierTxtInputList { get; set; } =
    [
        new TxtInput { Label = "Courier Name", ForName = "primaryCourierName", PlaceHolder = "Courier Name", BindValue = "", StripTitleName = "Primary Courier" },
        new TxtInput { Label = "Account Number", ForName = "primaryAcctNumber", PlaceHolder = "Account Number", BindValue = "", StripTitleName = "Primary Courier" },
        new TxtInput { Label = "LTL Courier Name", ForName = "ltlCourierName", PlaceHolder = "LTL Carrier Name", BindValue = "", StripTitleName = "LTL Courier" },
        new TxtInput { Label = "LTL Courier Bill To", ForName = "ltlCourierBillTo", PlaceHolder = "LTL Bill To Name", BindValue = "", StripTitleName = "LTL Courier" },
        new TxtInput { Label = "LTL Address", ForName = "ltlCarrierAddress", PlaceHolder = "LTL Carrier Address", BindValue = "", StripTitleName = "LTL Courier" }
    ];

    private List<IModalGrid> GridDataList { get; set; } =
    [
        new ModalGrid<SiteResponse>
        {
            GridName = "Sites",
            GridData = null,
            Columns =
            [
                new ModalGridColumn { Field = "SiteNumber", Title = "Site #" },
                new ModalGridColumn { Field = "FullAddress", Title = "Site Address" }
            ]
        },

        new ModalGrid<DocumentResponse>
        {
            GridName = "Documents",
            GridData = null,
            Columns = [new ModalGridColumn { Field = "DocumentName", Title = "Document Name", Width = "5px" }],
            IsDocumentGrid = true
        }
    ];


    string? _status;
    string? _agreementType;
    string? _envelopeStatus = string.Empty;
    string? _mdmTicketNumber;
    string? _businessName;
    string? _customerNumber;
    string? _contactEmail;
    string? _contactName;

    protected override void OnParametersSet()
    {
        //Console.WriteLine(Data.ToString());
        //if (agreement.Envelope is not null) _envelopeStatus = agreement.Envelope.EnvelopeStatus.ToString();
        if (Data is null) return;
        _status = Data.StatusDisplayName;
        _agreementType = Data.AgreementType.ToString();
        _mdmTicketNumber = Data.TicketNumber.HasValue() ? Data.TicketNumber : "Pending";
        _businessName = Data.BusinessName.HasValue() ? Data.BusinessName : "";
        _customerNumber = Data.CustomerNumber.ToString();
        _contactEmail = Data.ContactEmail.HasValue() ? Data.ContactEmail : "";
        _contactName = Data.ContactName.HasValue() ? Data.ContactName : "";
        if (Data.Envelope is not null) _envelopeStatus = Data.Envelope.EnvelopeStatus.ToString();
        if (Data.Carriers != null && Data.Carriers.Any())
        {
            var primaryCourier = Data.Carriers.FirstOrDefault(c => c.CarrierType == CarrierType.Parcel);

            if (primaryCourier is not null)
            {
                CourierTxtInputList[0].BindValue = primaryCourier.CarrierName;
                CourierTxtInputList[1].BindValue = primaryCourier.CarrierAccount;
            }
            else
            {
                CourierTxtInputList[0].BindValue = "";
                CourierTxtInputList[1].BindValue = "";
            }

            var ltlCourier = Data.Carriers.FirstOrDefault(c => c.CarrierType == CarrierType.Ltl);
            if (ltlCourier is not null)
            {
                CourierTxtInputList[2].BindValue = ltlCourier.CarrierName;
                CourierTxtInputList[3].BindValue = ltlCourier.CarrierAccount;
                CourierTxtInputList[4].BindValue = ltlCourier.CarrierAddress.HasValue() ? ltlCourier.CarrierAddress : "";
            }
            else
            {
                CourierTxtInputList[2].BindValue = "";
                CourierTxtInputList[3].BindValue = "";
            }
        }


        var sitesGrid = GridDataList.OfType<ModalGrid<SiteResponse>>().FirstOrDefault(g => g.GridName == "Sites");
        if (sitesGrid != null)
        {
            sitesGrid.GridData = Data.Sites.ToList();
        }


        if (Data.Documents == null) return;

        var documentsGrid = GridDataList.OfType<ModalGrid<DocumentResponse>>().FirstOrDefault(g => g.GridName == "Documents");
        if (documentsGrid != null)
        {
            documentsGrid.GridData = Data.Documents.ToList();
        }
    }

}