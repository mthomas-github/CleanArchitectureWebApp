<div class="align-self-center">
    <TelerikCard Width="100%">
        <CardHeader>
            <CardTitle>Agreement Types</CardTitle>
            <CardSubTitle>Please select appropriate request</CardSubTitle>
        </CardHeader>
        <CardBody>
            <div class="table-responsive">
            <table class="table table-md table-bordered">
                <thead>
                <tr>
                    <th scope="col">Type</th>
                    <th scope="col">Description</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var btn in _agreementButtons)
                {
                    <tr scope="row">
                        <th>
                            <TelerikButton @onclick="@(() => SetActiveButton(btn))" FillMode="@(AgreementButton.BtnFillMode)"
                                                   ThemeColor="@GetButtonThemeColor(btn)" ButtonType="@ButtonType.Button" class="same-size">@btn.BtnLabel</TelerikButton>
                        </th>
                        <th>
                            @btn.Description
                        </th>
                    </tr>
                }
                </tbody>
            </table>
            </div>
        </CardBody>
    </TelerikCard>
</div>

@code {

    [Parameter]
    public AgreementResponse? DataModel { get; set; }

    [Parameter]
    public EventCallback<AgreementResponse> DataModelChanged { get; set; }

    private readonly List<AgreementButton> _agreementButtons =
    [
        new AgreementButton { BtnLabel = "Add", IsActive = false, AgreementType = AgreementType.Add, Description = "Use \"Add: \" When adding a new site."},
        new AgreementButton { BtnLabel = "Remove", IsActive = false, AgreementType = AgreementType.Removal, Description = "Use \"Remove: \" When customer request to remove a site or internal request."},
        new AgreementButton { BtnLabel = "Update", IsActive = false, AgreementType = AgreementType.Update, Description = "Use \"Update: \" When updating carrier information." }
    ];

    protected 
    private class AgreementButton
    {
        public AgreementType AgreementType { get; init; }
        public string BtnLabel { get; init; } = string.Empty;
        public static string BtnFillMode => ThemeConstants.Button.FillMode.Solid;
        public bool IsActive { get; set; }
        public string Description { get; init; } = string.Empty;
    }

    // Method to set the active button
    private void SetActiveButton(AgreementButton button)
    {
        foreach (var btn in _agreementButtons)
        {
            btn.IsActive = false;
        }

        button.IsActive = true;
        if (DataModel is null) return;
        var envelope = new EnvelopeResponse
        {
            EnvelopeStatus = button.AgreementType is AgreementType.Add or AgreementType.Update ? EnvelopeStatus.Draft : EnvelopeStatus.NotRequired
        };

        DataModel.AgreementType = button.AgreementType;
        DataModel.Status = Status.Creating;
        DataModel.Envelope = envelope;
        DataModelChanged.InvokeAsync(DataModel);
    }

    private static string GetButtonThemeColor(AgreementButton button)
    {
        return button.IsActive ? ThemeConstants.Button.ThemeColor.Success : ThemeConstants.Button.ThemeColor.Primary;
    }
}
