@inject HttpClient Http

@if (_isLoading)
{
    <TelerikLoaderContainer Size="@ThemeConstants.Loader.Size.Large"
                            ThemeColor="primary"
                            OverlayThemeColor="light"
                            LoaderPosition="@LoaderPosition.Top"
                            Text="Data is Loading..."
                            LoaderType="@LoaderType.InfiniteSpinner"
    ></TelerikLoaderContainer>
}
else
{
    <TelerikStackLayout Orientation="StackLayoutOrientation.Vertical" Spacing="15px">
        <TelerikCard Class="select-customer-card">
            <CardBody>
                <label for="customer-select" class="label-space">Select a Customer:</label>
            @*<TelerikAutoComplete ScrollMode="DropDownScrollMode.Virtual"
                                     Id="customer-select"
                                     class="customer-select-au"
                                     Data="@Customers"
                                     ValueField="@(nameof(CustomerResponse.CustomerNumber))"
                                     Width="100%"
                                     Filterable="true"
                                     PageSize="20"
                                     ItemHeight="35"
                                     Placeholder="Start Typing Customer #..."
                                     FilterOperator="@StringFilterOperator.Contains"
                                     @bind-Value="@_customerNumber"
                                     OnChange="@SetCustomerName">*@
                <TelerikAutoComplete
                    id="customer-select"
                    class="customer-select-au"
                    TItem="@CustomerResponse"
                    OnChange="@SetCustomerName"
                    ValueField="@(nameof(CustomerResponse.CustomerNumber))"
                    Placeholder="Start Typing Customer #..."
                    ScrollMode="DropDownScrollMode.Virtual"
                    ItemHeight="30"
                    PageSize="20"
                    OnRead="@GetRemoteData"
                    @bind-Value="@AutoCompleteValue"
                    Filterable="true"
                    FilterOperator="StringFilterOperator.StartsWith">
                    <AutoCompleteSettings>
                        <AutoCompletePopupSettings Height="300px"></AutoCompletePopupSettings>
                    </AutoCompleteSettings>
                    <ItemTemplate>
                        <span>@($"{context.CustomerNumber} ({context.CustomerName})")</span>
                    </ItemTemplate>
                    <NoDataTemplate>
                        <div>
                            <TelerikSvgIcon Icon="@SvgIcon.InfoCircle" Size="@ThemeConstants.SvgIcon.Size.Large" />
                            <br />
                            <br />
                            No items to display...
                        </div>
                    </NoDataTemplate>
                </TelerikAutoComplete>
                
                <div style="margin-bottom: 10px">
                    <TelerikFloatingLabel Text="Business Name:" Class="custom-label">
                        <div class="k-form-field-wrap txt-margin-bottom">
                            <TelerikTextBox @bind-Value="@_businessName"></TelerikTextBox>
                        </div>
                    </TelerikFloatingLabel>
                    <TelerikFloatingLabel Text="Customer Name:" Class="custom-label">
                        <div class="k-form-field-wrap txt-margin-bottom">
                            <TelerikTextBox Value="@DataModel!.ContactName" ValueChanged="@SetContractName"></TelerikTextBox>
                        </div>
                    </TelerikFloatingLabel>
                    <TelerikFloatingLabel Text="Customer Email:" Class="custom-label">
                        <div class="k-form-field-wrap">
                            <TelerikTextBox InputMode="email" Value="@DataModel!.ContactEmail" ValueChanged="@SetContractEmail"></TelerikTextBox>
                        </div>
                    </TelerikFloatingLabel>
                </div>
            </CardBody>
        </TelerikCard>
    </TelerikStackLayout>
}

<style>
    .txt-margin-bottom {
        margin-bottom: 10px;
    }

    .customer-select-au {
        margin-bottom: 10px;
    }

    .custom-label {
        width: 100%;
    }
</style>

@code {

    List<CustomerResponse>? Customers { get; set; }

    private readonly string _customerNumber = string.Empty;
    private string _businessName = string.Empty;
    bool _isLoading = true;

    [Parameter]
    public AgreementResponse? DataModel { get; set; }

    [Parameter]
    public EventCallback<AgreementResponse> DataModelChanged { get; set; }

    string AutoCompleteValue { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        Customers = await Http.GetFromJsonAsync<List<CustomerResponse>>(GetCustomersEndPoint);
        _isLoading = false;
    }

    private async Task GetRemoteData(AutoCompleteReadEventArgs args)
    {
        if (Customers is null)
        {
            args.Data = null;
            args.Total = 0;
        }
        else
        {

            var result = await Customers.ToDataSourceResultAsync(args.Request);
            if (result is null) return;
            args.Data = result.Data;
            args.Total = result.Total;
        }
    }
    
    private void SetCustomerName()
    {
        try
        {
            if (Customers == null) return;
            
            var customer = Customers.FirstOrDefault(x => x.CustomerNumber.ToString() == _customerNumber);
            if (customer != null && DataModel is not null)
            {
                _businessName = customer.CustomerName;
                DataModel.CustomerNumber = int.Parse(_customerNumber);
                DataModel.BusinessName = _businessName;
            }
            else
            {
                Console.WriteLine("Customer not found with CustomerNumber: " + _customerNumber);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error setting business name: " + ex.Message);
        }
    }

    private void SetContractName(object userInput) => DataModel!.ContactName = (string)userInput;

    private void SetContractEmail(object userInput) => DataModel!.ContactEmail = (string)userInput;
}
