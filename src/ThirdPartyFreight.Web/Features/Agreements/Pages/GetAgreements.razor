@page "/agreements"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Agreements</PageTitle>

<div style="position: relative; width: 100%; min-height: 100%;">
    <TelerikLoaderContainer OverlayThemeColor="light"
                            Visible="@(!IsInitialDataLoadComplete)"
                            Text="@null"
                            Class="initial-data-loader">
        <Template>
            <TelerikLoader Size="@ThemeConstants.Loader.Size.Large" Type="@LoaderType.InfiniteSpinner" />
        </Template>
    </TelerikLoaderContainer>
    <TelerikGrid Data="@GridData"
                 Height="@Height"
                 FilterMode="GridFilterMode.FilterMenu"
                 FilterMenuType="FilterMenuType.CheckBoxList"
                 Pageable="true"
                 PageSize="@PageSize"
                 Sortable="true"
                 SortMode="SortMode.Single"
                 ShowColumnMenu="true"
                 OnCreate="@ToggleOnCreate"
                 Resizable="true"
                 OnDelete="@DeleteItem">
        <GridSettings>
            <GridPagerSettings InputType="@InputType" PageSizes="@PageSizes" ButtonCount="@ButtonCount" Position="@PagerPosition" />
        </GridSettings>
        <GridColumns>
            <GridColumn Field="Id" Title="Agreement Id" VisibleInColumnChooser="true" Visible="false" Width="20px" />
            <GridColumn Field="CustomerNumber" Title="Customer Number" VisibleInColumnChooser="true" Width="25px" />
            <GridColumn Field="CustomerName" Title="Customer Name" VisibleInColumnChooser="true" Width="40px" />
            <GridColumn Field="AgreementStatus" Title="Status" VisibleInColumnChooser="true" Width="40px" />
            <GridColumn Field="AgreementType" Title="Agreement Type" VisibleInColumnChooser="true" Width="40px" />
            <GridColumn Field="SiteType" Title="Site Type" VisibleInColumnChooser="true" Visible="false" Width="40px" />
            <GridColumn Field="EnvelopeStatus" Title="DocuSign Status" VisibleInColumnChooser="true" Visible="false" Width="40px" />

            <GridCommandColumn Width="30px">
                <GridCommandButton OnClick="@((args)=> ToggleWindow(args.Item as Agreement))" Icon="@SvgIcon.InfoSolid"></GridCommandButton>
                <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash"></GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
        <GridToolBarTemplate>
            <GridCommandButton OnClick="@(()=> ToggleOnCreate())" Icon="@SvgIcon.Plus">Add Agreement</GridCommandButton>
        </GridToolBarTemplate>
    </TelerikGrid>
    <ModelInfo @bind-WindowIsVisible="@Visible" Data="@Agreement"></ModelInfo>
    <TelerikNotification @ref="NotificationComponent"
                         Class="demo-notification"
                         HorizontalPosition="@NotificationHorizontalPosition.Right"
                         VerticalPosition="@NotificationVerticalPosition.Top"></TelerikNotification>
</div>
@code {
    private TelerikNotification NotificationComponent { get; set; } = default!;
    private ObservableCollection<Agreement> GridData { get; set; } = [];
    private IEnumerable<Agreement>? AllData { get; set; } = [];
    private Agreement? Agreement { get; set; }
    private const int PageSize = 20;
    private const string Height = "100%";
    private const int ButtonCount = 5;
    bool IsInitialDataLoadComplete { get; set; }
    PagerInputType InputType { get; set; } = PagerInputType.Buttons;
    PagerPosition PagerPosition { get; set; } = PagerPosition.Bottom;
    static List<int?> PageSizes => [20, 30, 40, 50, null];
    bool Visible { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (IsInitialDataLoadComplete == false)
        {
            AllData = await Http.GetFromJsonAsync<IEnumerable<Agreement>>("api/Agreements");
        }

        if (AllData is not null)
        {
            GridData = new ObservableCollection<Agreement>(AllData);
            IsInitialDataLoadComplete = true;
        }
    }

    async Task ToggleWindow(Agreement? item)
    {
        if (item is not null)
        {
            Agreement = await Http.GetFromJsonAsync<Agreement>($"api/Agreements/{item.Id}");
        }

        Visible = !Visible;
    }
    

    private void ToggleOnCreate()
    {
        NavigationManager.NavigateTo("./new-agreement");
    }

    private static void DeleteItem(GridCommandEventArgs args)
    {
        throw new NotImplementedException();
    }


}
