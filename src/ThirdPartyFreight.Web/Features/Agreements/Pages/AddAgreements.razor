@page "/new-agreement"
@page "/edit-agreement"

@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (ShowWizard)
{
    <Wizard Steps="@_contentUiSteps" OnFinish="@OnFinish" StartingStep="@StartingStep"></Wizard>
}
else
{
    <div class="demo-alert demo-alert-success" role="alert">
        The order was submitted successfully.
    </div>
}


@code {
    private bool ShowWizard { get; set; } = true;
    private int StartingStep { get; set; } = 0;

    private static AgreementResponse? _dataModel = null;
    private List<UiStep>? _contentUiSteps;

    public bool IsStep1Disabled { get; set; } = false;
    public bool IsStep2Disabled { get; set; } = true;
    public bool IsStep3Disabled { get; set; } = true;
    public bool IsStep4Disabled { get; set; } = true;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!ShowWizard && !firstRender)
        {
            NavigationManager.NavigateTo("./Agreements");
        };
    }

    public void OnStepFinish(WizardStepChangeEventArgs args, AgreementResponse agreementResponse)
    {
        _dataModel = agreementResponse;

        if (args.TargetIndex != 3) return;
        agreementResponse.CreatedBy = "Test User";
        HandleDataModelChanged(agreementResponse);
    }

    private static void HandleDataModelChanged(AgreementResponse newDataModel)
    {
        _dataModel = newDataModel;
    }

    private async Task OnFinish()
    {
        if (_dataModel is null) return;
        // Create Agreement, Wait Until Success Get Guid
        var agreementRequest = new AgreementRequest
            {
                CustomerNumber = _dataModel.CustomerNumber,
                CustomerName = _dataModel.BusinessName,
                ContactEmail = _dataModel.ContactEmail,
                ContactName = _dataModel.ContactName,
                AgreementType = _dataModel.AgreementType,
                SiteType = SiteType.Normal,
                Status = _dataModel.Status,
                CreatedBy = _dataModel.CreatedBy,
            };

        var result = await
            Http.PostAsJsonAsync("api/v1.0/agreements", agreementRequest);


        // Call Sites, Envelopes, Documents

        var guidString = await result.Content.ReadAsStringAsync();
        var agreementId = guidString.Trim('"');

        if (result.IsSuccessStatusCode)
        {
            var siteRequest = _dataModel.Sites.Select(site => new SiteRequest
                {
                    AgreementId = agreementId,
                    SiteNumber = site.SiteNumber.ToString(),
                    Street = site.Street,
                    City = site.City,
                    State = site.State,
                    ZipCode = site.ZipCode,
                })
                .ToList();
            var siteResult = await Http.PostAsJsonAsync("api/v1.0/sites", siteRequest);

            if (_dataModel.Envelopes != null)
            {
                var envelopeRequest = new EnvelopeRequest
                {
                        AgreementId = agreementId,
                    EnvelopeStatus = _dataModel.Envelopes.EnvelopeStatus,
                };

                var envelopeResult = await Http.PostAsJsonAsync("api/v1.0/envelopes", envelopeRequest);
            }

            if (_dataModel.Documents is { Count: > 0 })
            {
                var documentRequest = _dataModel.Documents.Select(document => new DocumentRequest
                    {
                        AgreementId = agreementId,
                        DocumentType = document.DocumentType,
                        DocumentData = document.DocumentData,
                        DocumentName = document.DocumentName,
                    })
                    .ToList();

                var documentResult = await Http.PostAsJsonAsync("api/v1.0/documents", documentRequest);
            }
        }
        ShowWizard = false;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _contentUiSteps =
        [
            new UiStep
            {
                StepLabel = "Agreement AgreementType",
                IsValidStep = false,
                ChildContent = (dataModel) =>
                {
                    // Render your component here
                    return builder =>
                    {
                        builder.OpenComponent(0, typeof(AgreementTypeInfo));
                        builder.AddAttribute(1, "DataModel", dataModel);
                        builder.CloseComponent();
                    };
                },
                OnChange = OnStepFinish,
            },


    new UiStep
            {
                StepLabel = "Customer Information",
                IsValidStep = false,
                ChildContent = (dataModel) =>
                {
                    // Render your component here
                    return builder =>
                    {
                        builder.OpenComponent(0, typeof(AgreementCustomerInformation));
                        builder.AddAttribute(1, "DataModel", dataModel);
                        builder.CloseComponent();
                    };
                },
                OnChange = OnStepFinish,
            },


    new UiStep
            {
                StepLabel = "Sites Information",
                IsValidStep = false,
                ChildContent = (dataModel) =>
                {
                    // Render your component here
                    return builder =>
                    {
                        builder.OpenComponent(0, typeof(SitesAndDocuments));
                        builder.AddAttribute(1, "DataModel", dataModel);
                        builder.CloseComponent();
                    };
                },
                OnChange = OnStepFinish,
            },


    new UiStep
            {
                StepLabel = "Review",
                IsValidStep = false,
                ChildContent = (dataModel) =>
                {
                    // Render your component here
                    return builder =>
                    {
                        builder.OpenComponent(0, typeof(AgreementReview));
                        builder.AddAttribute(1, "DataModel", dataModel);
                        builder.CloseComponent();
                    };
                },
                OnChange = OnStepFinish,
            }
        ];
    }

}
