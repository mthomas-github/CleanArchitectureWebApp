@page "/approvals"
@inject HubConnection HubConnection
@implements IDisposable
@inject HttpClient Http

<PageTitle>Approvals</PageTitle>

<div class="row justify-content-center" style="padding-top: 20px">
    <TelerikLoaderContainer
        OverlayThemeColor="light"
        Visible="@(!IsInitialDataLoadComplete)"
        Text="@null"
        Class="initial-data-loader">
        <Template>
            <TelerikLoader Size="@ThemeConstants.Loader.Size.Large" Type="LoaderType.InfiniteSpinner"/>
        </Template>
    </TelerikLoaderContainer>
    <TelerikGrid
        Data="@GridData"
        Height="@Height"
        Width="35%"
        Class="k-grid grid-no-scroll row-cols-auto"
        FilterMode="GridFilterMode.FilterMenu"
        FilterMenuType="FilterMenuType.CheckBoxList"
        Pageable="true"
        PageSize="@PageSize"
        Sortable="true"
        SortMode="SortMode.Single"
        ShowColumnMenu="true"
        Resizable="true">
        <GridSettings>
            <GridPagerSettings
                InputType="@InputType"
                PageSizes="@PageSizes"
                ButtonCount="@ButtonCount"
                Position="@PagePosition"/>
        </GridSettings>
        <GridColumns>
            <GridColumn Field="ApprovalId" Title="Id" VisibleInColumnChooser="true" Visible="false" Width="20px"/>
            <GridColumn Field="ApproverDisplayName" TextAlign="ColumnTextAlign.Center" Title="Approver" VisibleInColumnChooser="true" Visible="true" Width="5px"/>
            <GridColumn Field="AgreementType" TextAlign="ColumnTextAlign.Center" Title="Agreement Type" VisibleInColumnChooser="true" Visible="true" Width="5px"/>
            <GridCommandColumn Width="5px">
                <GridCommandButton Title="Agreement Info" AriaLabel="Agreement Info" ThemeColor="info" Size="lg" OnClick="@((args) => ToggleWindow(args.Item as ApprovalResponse))" Icon="@SvgIcon.InfoSolid"/>
                <GridCommandButton Title="Approval" AriaLabel="Approval Agreement" ThemeColor="success" Size="lg" Icon="@SvgIcon.Check" OnClick="@((args) => HandleApproval(args.Item as ApprovalResponse))"/>
                <GridCommandButton Title="Decline" AriaLabel="Decline Agreement" ThemeColor="error" Size="lg" Icon="@SvgIcon.X" OnClick="@((args) => HandleDecline(args.Item as ApprovalResponse))"/>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
</div>

@code {
    private ObservableCollection<ApprovalResponse?> GridData { get; set; } = [];
    private IEnumerable<ApprovalResponse>? AllData { get; set; } = [];
    private const int PageSize = 20;
    private const string Height = "100%";
    private const int ButtonCount = 5;
    bool IsInitialDataLoadComplete { get; set; }
    PagerInputType InputType { get; set; } = PagerInputType.Buttons;
    PagerPosition PagePosition { get; set; } = PagerPosition.Bottom;
    static List<int?> PageSizes => [20, 30, 40, 50, null];
    bool Visible { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        
        if (IsInitialDataLoadComplete == false)
        {
            AllData = await Http.GetFromJsonAsync<IEnumerable<ApprovalResponse>>($"{GetAllApprovalsEndPoint}");
        }

        if (AllData is not null)
        {
            GridData = new ObservableCollection<ApprovalResponse?>(AllData);
            IsInitialDataLoadComplete = true;
        }

        AddApprovalDataListener();
    }
    
    private void AddApprovalDataListener()
    {
        HubConnection.On<ApprovalResponse>("SendPayload", (payload) =>
        {
            if (GridData.Any(item => item?.ApprovalId == payload.ApprovalId)) return;
            GridData.Add(payload);
            StateHasChanged();
        });
        
        HubConnection.On<Guid>("DeletePayload", (payload) =>
        {
            Console.WriteLine($"Received DeletePayload for ApprovalId: {payload}");
            // Remove the approval
            var itemToRemove = GridData.FirstOrDefault(item => item?.WorkFlowTaskId == payload);
            if (itemToRemove is null) return;
            GridData.Remove(itemToRemove);
            StateHasChanged();
        });
    }

    async Task ToggleWindow(ApprovalResponse? item)
    {
        if (item is not null)
        {
            await Http.GetFromJsonAsync<AgreementResponse>($"{GetAgreementEndPoint}/{item.AgreementId}");
        }

        Visible = !Visible;
    }

    private async Task HandleApproval(ApprovalResponse? item)
    {
        if (item is not null)
        {
            GridData.Remove(item);
            var request = new ApprovalCompleteRequest(item.WorkFlowTaskId, item.TaskId);
            await Http.PutAsJsonAsync($"{CompleteTaskEndPoint}", request);
        }
        else
        {
            throw new NullReferenceException("item was null, unable to complete the task");
        }
    }

    private static Task HandleDecline(ApprovalResponse? item)
    {
        throw new NotImplementedException();
    }

    public void Dispose()
    {
        HubConnection.Remove("SendPayload");
        HubConnection.Remove("DeletePayload");
    }

}