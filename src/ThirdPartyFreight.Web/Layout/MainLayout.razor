@using System.Security.Claims
@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<TelerikRootComponent>
    <TelerikAppBar ThemeColor="@ThemeConstants.AppBar.ThemeColor.Tertiary">
        <AppBarSection>
            <TelerikButton  FillMode="flat" Icon="@SvgIcon.Menu" OnClick="ToggleMenuDrawer" />
        </AppBarSection>

        <AppBarSpacer Size="4px" />

        <AppBarSection>
            <h1 class="title">Third Party Freight Request Web App</h1>
        </AppBarSection>

        <AppBarSection Class="AuthBtn">
            
                @if (_user is null || _user!.Identity?.IsAuthenticated != true)
                {
                    <TelerikButton Size="@ThemeConstants.Button.Size.Large" FillMode="flat" Icon="@SvgIcon.Login" OnClick="HandleLogin"/>
                }
                else
                {
                    <TelerikButton Size="@ThemeConstants.Button.Size.Large" FillMode="flat" Icon="@SvgIcon.Logout" OnClick="HandleLogout"/>
                }

        </AppBarSection>
    </TelerikAppBar>
    <TelerikDrawer @ref="MenuDrawer"
                   Expanded="@Expanded"
                   ExpandedChanged="((bool newValue) => ExpandedChangedHandler(newValue))"
                   Width="190px" 
                   Data="Data" 
                   Mode="DrawerMode.Push" 
                   Position="DrawerPosition.Start" 
                   MiniMode="true">
        <DrawerContent>
            @Body
        </DrawerContent>
    </TelerikDrawer>
</TelerikRootComponent>

<TelerikMediaQuery Media="(max-width: 768px)" OnChange="((changed) => WindowWidthSmall = changed)"></TelerikMediaQuery>

@code
{
    TelerikDrawer<DrawerItem> MenuDrawer { get; set; } = new();

    bool Expanded { get; set; }
    bool WindowWidthSmall { get; set; }
    private ClaimsPrincipal? _user;
    static IEnumerable<DrawerItem> Data =>
        new List<DrawerItem>
        {
            new() { Text = "Home", Icon = SvgIcon.Grid, Url = "/" },
            new() { Text = "Agreements", Icon = SvgIcon.DocumentManager, Url = AgreementsNavigation },
            new() { Text = "Approvals", Icon = SvgIcon.ClipboardText, Url = ApprovalsNavigation },
        };

    async Task ToggleMenuDrawer()
    {
        if (Expanded)
        {
            await MenuDrawer.CollapseAsync();
        }
        else
        {
            await MenuDrawer.ExpandAsync();
        }
    }

    async Task ExpandedChangedHandler(bool value)
    {
        Expanded = value;

        await LocalStorage.SetItemAsync("drawerState", value);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;
        var hasKey = await LocalStorage.ContainKeyAsync("drawerState");
        if (hasKey)
        {
            Expanded = await LocalStorage.GetItemAsync<bool>("drawerState");
        }
        else
        {
            Expanded = false;
        }
    }

    void HandleLogout()
    {
        Navigation.NavigateTo("/logout");
    }

    void HandleLogin()
    {
        Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
    }
}
